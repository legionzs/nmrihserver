"Games"
{
	"nmrih"
	{
		"Offsets"
		{
			"IsLinux"
			{
				"windows" "0"
				"linux" "1"
			}

			"CNMRiH_BaseBow::m_flMinFireTime"
			{
				// float
				"windows"	"2164"
				"linux"		"2188"
			}

			"CGameTrace::hitgroup"
			{
				// int
				"windows" "68"
				"linux" "68"
			}

			"CTakeDamageInfo::m_hAttacker"
			{
				// EHANDLE
				"windows" "40"
				"linux" "40"
			}

			"CTakeDamageInfo::m_hInflictor"
			{
				// EHANDLE
				"windows" "36"
				"linux" "36"
			}

			"CTakeDamageInfo::m_flDamage"
			{
				// float
				"windows" "48"
				"linux" "48"
			}

			"CTakeDamageInfo::m_bitsDamageType"
			{
				// int
				"windows" "60"
				"linux" "60"
			}

			// ================================================================
			// CBaseEntity

			"CBaseEntity::TraceAttack"
			{
				// void (const CTakeDamageInfo &, const Vector &, CGameTrace *, CDmgAccumulator *)
				"windows" "62"
				"linux" "63"
			}

			// ================================================================
			// Medical Weapons

			"CNMRiH_BaseMedicalItem::ApplyMedicalItem_Internal"
			{
				// void ()
				"windows" "439"
				"linux" "440"
			}

			"CNMRiH_BaseMedicalItem::ShouldUseMedicalItem"
			{
				// bool ()
				"windows" "440"
				"linux" "441"
			}

			// ================================================================
			// Grenade

			"CBaseSDKGrenade::EmitGrenade"
			{
				//void (Vector,QAngle,Vector,Vector,CBasePlayer *,CWeaponSDKBase *)
				"windows" "441"
				"linux" "442"
			}

			// ================================================================
			// Weapons

			"CBaseCombatWeapon::HasAnyAmmo"
			{
				// bool ()
				"windows" "247"
				"linux" "248"
			}

			"CBaseCombatWeapon::PrimaryAttack"
			{
				// void ()
				"windows" "278"
				"linux" "279"
			}

			"CBaseCombatWeapon::SecondaryAttack"
			{
				// void ()
				"windows" "279"
				"linux" "280"
			}

			"CBaseCombatWeapon::GetMaxClip1"
			{
				// int () const
				"windows" "317"
				"linux" "318"
			}

			"CBaseCombatWeapon::GetWeight"
			{
				// int () const
				"windows" "321"
				"linux" "322"
			}

			"CBaseCombatWeapon::AllowsAutoSwitchTo"
			{
				// bool () const
				"windows" "322"
				"linux" "323"
			}

			"CBaseCombatWeapon::GetShootSound"
			{
				// char * (WeaponSound_t)
				"windows" "330"
				"linux" "331"
			}

			"CBaseCombatWeapon::GetWeaponID"
			{
				// int () const
				"windows" "373"
				"linux" "374"
			}

			"CNMRiH_WeaponBase::GetShoveDamage"
			{
				// int (const CGameTrace &)
				"windows" "395"
				"linux" "396"
			}

			"CNMRiH_MeleeBase::GetThrownDamage"
			{
				// int (CGameTrace  const&)
				"windows" "396"
				"linux" "397"
			}

			"CNMRiH_WeaponBase::TurnOnIronsights"
			{
				// void ()
				"windows" "406"
				"linux" "407"
			}

			"CNMRiH_WeaponBase::TurnOffIronsights"
			{
				// void ()
				"windows" "407"
				"linux" "408"
			}

			"CNMRiH_WeaponBase::ToggleFlashlight"
			{
				// void ()
				"windows" "414"
				"linux" "415"
			}

			"CNMRiH_WeaponBase::IsFlashlightOn"
			{
				// bool ()
				"windows" "415"
				"linux" "416"
			}

			"CNMRiH_WeaponBase::IsFlashlightAllowed"
			{
				// bool ()
				"windows" "416"
				"linux" "417"
			}

			"CNMRiH_WeaponBase::StartShove"
			{
				// void ()
				"windows" "417"
				"linux" "418"
			}

			"CNMRiH_WeaponBase::DoShove"
			{
				// void ()
				"windows" "419"
				"linux" "420"
			}

			"CNMRiH_WeaponBase::CheckAmmo"
			{
				"windows" "420"
				"linux" "421"
			}

			"CNMRiH_WeaponBase::GetExtraShoveDelay"
			{
				// float ()
				"windows" "431"
				"linux" "432"
			}

			"CNMRiH_MeleeBase::QuickAttack"
			{
				// void ()
				"windows" "437"
				"linux" "438"
			}

			"CNMRiH_MeleeBase::DoMeleeBash"
			{
				// void (int)
				"windows" "438"
				"linux" "439"
			}

			"CNMRiH_MeleeBase::ChargeBash"
			{
				// void ()
				"windows" "439"
				"linux" "440"
			}

			"CNMRiH_MeleeBase::FinishBash"
			{
				// void (bool)
				"windows" "440"
				"linux" "441"
			}

			"CNMRiH_MeleeBase::GetMeleeDamage"
			{
				// float (CBaseEntity *, int)
				"windows" "443"
				"linux" "444"
			}

			"CNMRiH_BaseTool::EndSecondary"
			{
				// void
				"windows" "449"
				"linux" "450"
			}

			"CNMRiH_BaseTool::BeginSecondary"
			{
				// void (CNMRiH_Trigger_ProgressWeapon *)
				"windows" "450"
				"linux" "451"
			}

			// ================================================================
			// Player

			"CNMRiH_Player::Weapon_Drop"
			{
				// void (CBaseCombatWeapon *,Vector  const*,Vector  const*)
				"windows" "271"
				"linux" "272"
			}

			"CNMRiH_Player::BumpWeapon"
			{
				// bool (CBaseCombatWeapon *, bool)
				"windows" "415"
				"linux" "416"
			}

			"CNMRiH_Player::HasFlashlight"
			{
				// bool ()
				"windows" "502"
				"linux" "503"
			}

			// ================================================================
			// GameRules

			"CMultiplayRules::CanHavePlayerItem"
			{
				// bool (CBasePlayer *,CBaseCombatWeapon *)
				"windows" "87"
				"linux" "88"
			}
		}

		"Signatures"
		{
			"CNMRiH_Player::Weapon_PickedUp"
			{
				// void (CBaseCombatWeapon *)
				"library" "server"
				"linux" "@_ZN13CNMRiH_Player15Weapon_PickedUpEP17CBaseCombatWeapon"
				"windows" "\x55\x8B\xEC\x81\xEC\x10\x01\x00\x00\x53\x57\x8B\x7D\x08\x8B\xD9\x85\xFF"
			}

			"CNMRiH_WeaponBase::AllowsSuicide"
			{
				// bool ()
				"library" "server"
				"linux" "@_ZNK17CNMRiH_WeaponBase13AllowsSuicideEv"
				"windows" "\xE8\x2A\x2A\x2A\x2A\x8A\x80\xD0\x07\x00\x00"
			}

			"CNMRiH_WeaponBase::IsSkillshotModeAvailable"
			{
				// bool ()
				"library" "server"
				"linux" "@_ZN17CNMRiH_WeaponBase24IsSkillshotModeAvailableEv"
				// Ryan: TODO: It's a little more complicated for Windows.
				"windows" "\x56\x57\x8B\xF9\xE8\x2A\x2A\x2A\x2A\x8B\xF0\x85\xF6\x74\x2A\x8B\x16\x8B\xCE\x8B\x92\x4C\x01\x00\x00\xFF\xD2\x84\xC0\x74\x2A\x8B\x07\x8B\xCF\x8B\x80\x64\x06\x00\x00"
			}

			"CNMRiH_WeaponBase::Unload"
			{
				// void ()
				"library" "server"
				"linux" "@_ZN17CNMRiH_WeaponBase6UnloadEv"
				"windows" "\x55\x8B\xEC\x51\x53\x57\x8B\xF9\xE8\x2A\x2A\x2A\x2A\x8B\xD8\x85\xDB\x0F\x84\x2A\x2A\x2A\x2A\x8B\x13"
			}

			"CNMRiH_MeleeBase::DrainMeleeSwingStamina"
			{
				"library" "server"
				"linux" "@_ZNK16CNMRiH_MeleeBase22DrainMeleeSwingStaminaEv"
				"windows" "\x56\x57\x8B\xF9\xE8\x2A\x2A\x2A\x2A\x8B\xF0\x85\xF6\x74\x2A\x8B\x16\x8B\xCE\x8B\x92\x4C\x01\x00\x00\xFF\xD2\x84\xC0\x74\x2A\x8B\xCF\xE8\x2A\x2A\x2A\x2A\xF3\x0F\x10\x15"
			}

			"CNMRiH_MeleeBase::ShouldMeleePushback"
			{
				// bool ()
				"library" "server"
				"linux"	"@_ZNK16CNMRiH_MeleeBase19ShouldMeleePushbackEv"
				"windows" "\x55\x8B\xEC\x51\x56\x8B\xF1\xC7\x45\xFC\x00\x00\x00\x00\xE8"
			}
		}

		"Functions"
		{
			//
			// Virtual DHooks
			//

			"CNMRiH_BaseMedicalItem::ShouldUseMedicalItem"
			{
				"offset" "CNMRiH_BaseMedicalItem::ShouldUseMedicalItem"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseEntity::TraceAttack"
			{
				"offset" "CBaseEntity::TraceAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"damageInfo"
					{
						"type" "objectptr" // const CTakeDamageInfo &
						"flags" "byref"
					}
					"direction"
					{
						"type" "objectptr" // const Vector &
						"flags" "byref"
					}
					"trace"
					{
						"type" "objectptr" // trace_t *
					}
					"accumulator"
					{
						"type" "objectptr" // CDmgAccumulator *
					}
				}
			}

			"CBaseCombatWeapon::GetMaxClip1"
			{
				"offset" "CBaseCombatWeapon::GetMaxClip1"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseCombatWeapon::GetWeight"
			{
				"offset" "CBaseCombatWeapon::GetWeight"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::GetShoveDamage"
			{
				"offset" "CNMRiH_WeaponBase::GetShoveDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
					"trace"
					{
						"type" "objectptr"	// CGameTrace  const&
						"flags" "byref"
					}
				}
			}

			"CNMRiH_MeleeBase::GetShoveDamage"
			{
				"offset" "CNMRiH_MeleeBase::GetShoveDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
					"trace"
					{
						"type" "objectptr"	// CGameTrace  const&
						"flags" "byref"
					}
				}
			}

			"CNMRiH_MeleeBase::GetThrownDamage"
			{
				"offset" "CNMRiH_MeleeBase::GetThrownDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "int"
				"this" "entity"
				"arguments"
				{
					"trace"
					{
						"type" "objectptr"	// CGameTrace  const&
						"flags" "byref"
					}
				}
			}
			
			"CNMRiH_WeaponBase::DoShove"
			{
				"offset" "CNMRiH_WeaponBase::DoShove"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::CheckAmmo"
			{
				"offset" "CNMRiH_WeaponBase::CheckAmmo"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::QuickAttack"
			{
				"offset" "CNMRiH_MeleeBase::QuickAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::DoMeleeBash"
			{
				"offset" "CNMRiH_MeleeBase::DoMeleeBash"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"unknown"
					{
						"type" "int"
					}
				}
			}

			"CNMRiH_MeleeBase::ChargeBash"
			{
				"offset" "CNMRiH_MeleeBase::ChargeBash"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::FinishBash"
			{
				"offset" "CNMRiH_MeleeBase::FinishBash"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"unknown"
					{
						"type" "bool"
					}
				}
			}

			"CNMRiH_MeleeBase::GetMeleeDamage"
			{
				"offset" "CNMRiH_MeleeBase::GetMeleeDamage"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "float"
				"this" "entity"
				"arguments"
				{
					"target"
					{
						"type" "cbaseentity"
					}
					"hitgroup"
					{
						"type" "int"
					}
				}
			}

			"CNMRiH_WeaponBase::StartShove"
			{
				"offset" "CNMRiH_WeaponBase::StartShove"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseCombatWeapon::PrimaryAttack"
			{
				"offset" "CBaseCombatWeapon::PrimaryAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseCombatWeapon::SecondaryAttack"
			{
				"offset" "CBaseCombatWeapon::SecondaryAttack"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CBaseSDKGrenade::EmitGrenade"
			{
				"offset" "CBaseSDKGrenade::EmitGrenade"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
					"source"
					{
						"type" "vectorptr" // Vector
					}
					"angles"
					{
						"type" "vectorptr" // QAngle
					}
					"velocity"
					{
						"type" "vectorptr" // Vector
					}
					"angularImpulse"
					{
						"type" "vectorptr" // AngularImpulse
					}
					"player"
					{
						"type" "cbaseentity" // CBasePlayer *
					}
					"unknown"
					{
						"type" "cbaseentity" // CWeaponSDKBase *
					}
				}
			}

			"CNMRiH_WeaponBase::TurnOnIronsights"
			{
				"offset" "CNMRiH_WeaponBase::TurnOnIronsights"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::TurnOffIronsights"
			{
				"offset" "CNMRiH_WeaponBase::TurnOffIronsights"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::ToggleFlashlight"
			{
				"offset" "CNMRiH_WeaponBase::ToggleFlashlight"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_BaseMedicalItem::ApplyMedicalItem_Internal"
			{
				"offset" "CNMRiH_BaseMedicalItem::ApplyMedicalItem_Internal"
				"callconv" "thiscall"
				"hooktype" "entity"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			//
			// Dynamic detours
			//

			"CNMRiH_WeaponBase::AllowsSuicide"
			{
				"signature" "CNMRiH_WeaponBase::AllowsSuicide"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::IsSkillshotModeAvailable"
			{
				"signature" "CNMRiH_WeaponBase::IsSkillshotModeAvailable"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_WeaponBase::Unload"
			{
				"signature" "CNMRiH_WeaponBase::Unload"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::DrainMeleeSwingStamina"
			{
				"signature" "CNMRiH_MeleeBase::DrainMeleeSwingStamina"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"arguments"
				{
				}
			}

			"CNMRiH_MeleeBase::ShouldMeleePushback"
			{
				"signature" "CNMRiH_MeleeBase::ShouldMeleePushback"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"arguments"
				{
				}
			}
		}
	}
}
